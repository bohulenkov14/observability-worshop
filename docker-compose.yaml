services:

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "3200" # tempo
      - "4317" # otlp grpc
    depends_on:
      - init

  # Generate API traffic
  k6:
    image: grafana/k6:latest
    volumes:
      - ./k6:/scripts
    command: run /scripts/script.js
    environment:
      - K6_OUT=json=stdout
    depends_on:
      - public-api
    networks:
      - default

  # And put them in an OTEL collector pipeline...
  otel-collector:
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./otel-collector.yaml:/etc/otel-collector.yaml
    depends_on:
      - loki
      - prometheus
      - tempo

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
      - --web.enable-otlp-receiver
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:11.0.0
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"

  user-service:
    build:
      context: ./src/user-service
      dockerfile: Dockerfile
    ports:
      - "8080"
    volumes:
      - ./otel-agent/opentelemetry-javaagent.jar:/app/opentelemetry-javaagent.jar
    environment:
      - JAVA_OPTS=-Xmx512m
      - OTEL_SERVICE_NAME=user-service
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_METRIC_EXPORT_INTERVAL=10000
      - OTEL_IMR_EXPORT_INTERVAL=10000
      - OTEL_INSTRUMENTATION_JVM_METRICS_ENABLED=true
    depends_on:
      - tempo
      - prometheus
      - loki
      - otel-collector
    networks:
      - default

  public-api:
    build:
      context: ./src/public-api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./otel-agent/opentelemetry-javaagent.jar:/app/opentelemetry-javaagent.jar
    environment:
      - JAVA_OPTS=-Xmx512m
      - OTEL_SERVICE_NAME=public-api
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_METRIC_EXPORT_INTERVAL=10000
      - OTEL_IMR_EXPORT_INTERVAL=10000
      - OTEL_INSTRUMENTATION_JVM_METRICS_ENABLED=true
    depends_on:
      - tempo
      - prometheus
      - loki
      - otel-collector
      - user-service
    networks:
      - default
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml